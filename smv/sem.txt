-- specification  G !(proc1.state = critical & proc2.state = critical)  is true
-- specification  G (proc1.state = entering ->  F proc1.state = critical)  is false
-- as demonstrated by the following execution sequence
Trace Description: LTL Counterexample 
Trace Type: Counterexample 
  -> State: 1.1 <-
    semaphore = FALSE
    proc1.state = idle
    proc2.state = idle
  -> Input: 1.2 <-
    _process_selector_ = proc1
    running = FALSE
    proc2.running = FALSE
    proc1.running = TRUE
  -> State: 1.2 <-
  -> Input: 1.3 <-
    _process_selector_ = proc2
    proc2.running = TRUE
    proc1.running = FALSE
  -> State: 1.3 <-
  -> Input: 1.4 <-
    _process_selector_ = proc1
    proc2.running = FALSE
    proc1.running = TRUE
  -- Loop starts here
  -> State: 1.4 <-
    proc1.state = entering
  -> Input: 1.5 <-
    _process_selector_ = proc2
    proc2.running = TRUE
    proc1.running = FALSE
  -- Loop starts here
  -> State: 1.5 <-
  -> Input: 1.6 <-
  -- Loop starts here
  -> State: 1.6 <-
  -> Input: 1.7 <-
  -> State: 1.7 <-
    proc2.state = entering
  -> Input: 1.8 <-
  -> State: 1.8 <-
    semaphore = TRUE
    proc2.state = critical
  -> Input: 1.9 <-
    _process_selector_ = proc1
    proc2.running = FALSE
    proc1.running = TRUE
  -> State: 1.9 <-
  -> Input: 1.10 <-
    _process_selector_ = proc2
    proc2.running = TRUE
    proc1.running = FALSE
  -> State: 1.10 <-
  -> Input: 1.11 <-
  -> State: 1.11 <-
    proc2.state = exiting
  -> Input: 1.12 <-
  -> State: 1.12 <-
    semaphore = FALSE
    proc2.state = idle
