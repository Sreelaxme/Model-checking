MODULE main
VAR
	pr1: process prc(pr2.st, turn, FALSE);
	pr2: process prc(pr1.st, turn, TRUE);
	turn: boolean;
ASSIGN
	init(turn) := FALSE;
-- safety
LTLSPEC G!((pr1.st = c) & (pr2.st = c))

-- liveness
LTLSPEC G((pr1.st = t) -> F (pr1.st = c))
LTLSPEC G((pr2.st = t) -> F (pr2.st = c))

-- ‘negation’ of strict sequencing (desired to be false)
LTLSPEC G(pr1.st=c ->(G pr1.st=c | (pr1.st=c U
(!(pr1.st=c) & G !(pr1.st=c) | (!(pr1.st=c) U pr2.st=c)))))

MODULE prc(other-st, turn, myturn)
VAR
	st: {ncs,req,wait,cs,rel};
ASSIGN
	init(st) := ncs;
	next(st) :=
	case
		(st = ncs) 						: {req,ncs};
		(st = req) & (other-st = cs) 				: wait;
		(st = req) & (other-st = ncs) 				: cs;
		(st = wait) & (other-st = wait) & (rel = TRUE) & (turn =myturn)		: cs;
		(st = c) 						: {c,n};
		TRUE 							: st;
	esac;
	next(turn) :=
	case
		turn = myturn & st=c					: !turn;
		TRUE							: turn;
	esac;
FAIRNESS running
FAIRNESS !(st = c)
